# server/.env.example
NODE_ENV=development
PORT=5000
API_VERSION=v1

# Database Configuration
DATABASE_URL=postgresql://ecd_user:ecd_password@localhost:5432/ecd_db
DATABASE_POOL_SIZE=20

# Redis Configuration
REDIS_URL=redis://localhost:6379
CACHE_TTL=3600

# Authentication
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_EXPIRY=24h
REFRESH_TOKEN_EXPIRY=7d
BCRYPT_ROUNDS=12

# File Storage (AWS S3)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_S3_BUCKET=ecd-materials-bucket
AWS_REGION=us-east-1

# Payment Processing (Stripe)
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key

# Email Service (SendGrid)
SENDGRID_API_KEY=your-sendgrid-api-key
FROM_EMAIL=noreply@your-domain.com
FROM_NAME=ECD Materials Platform

# SMS Service (Twilio)
TWILIO_ACCOUNT_SID=your-twilio-account-sid
TWILIO_AUTH_TOKEN=your-twilio-auth-token
TWILIO_PHONE_NUMBER=+1234567890

# WhatsApp Integration
WHATSAPP_TOKEN=your-whatsapp-business-token
WHATSAPP_PHONE_ID=your-phone-number-id

# Analytics
GOOGLE_ANALYTICS_ID=GA_MEASUREMENT_ID
MIXPANEL_TOKEN=your-mixpanel-token

# Feature Flags
FEATURE_COLLABORATION=true
FEATURE_OFFLINE_SYNC=true
FEATURE_ADVANCED_ANALYTICS=false
FEATURE_PAYMENT_INTEGRATION=true

# Logging
LOG_LEVEL=info
LOG_FILE_PATH=./logs/app.log

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# File Upload Limits
MAX_FILE_SIZE=10485760
ALLOWED_FILE_TYPES=jpg,jpeg,png,gif,pdf,doc,docx

# Session Configuration
SESSION_SECRET=your-session-secret-key
SESSION_MAX_AGE=86400000

---

# client/.env.example
REACT_APP_API_URL=http://localhost:5000
REACT_APP_WS_URL=ws://localhost:5000
REACT_APP_STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key
REACT_APP_GOOGLE_ANALYTICS_ID=GA_MEASUREMENT_ID
REACT_APP_MIXPANEL_TOKEN=your-mixpanel-token
REACT_APP_VERSION=$npm_package_version
REACT_APP_FEATURE_COLLABORATION=true
REACT_APP_FEATURE_OFFLINE_SYNC=true
REACT_APP_FEATURE_ADVANCED_ANALYTICS=false

---

# scripts/init.sql
-- Initial database setup for production
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "citext";

-- Create custom types
CREATE TYPE user_role AS ENUM ('teacher', 'school_admin', 'parent', 'system_admin');
CREATE TYPE subscription_plan AS ENUM ('free', 'teacher', 'school', 'premium');
CREATE TYPE subscription_status AS ENUM ('active', 'cancelled', 'expired', 'trial');
CREATE TYPE assignment_status AS ENUM ('draft', 'active', 'completed', 'archived');
CREATE TYPE progress_status AS ENUM ('not_started', 'in_progress', 'completed', 'overdue');
CREATE TYPE template_category AS ENUM ('math', 'language', 'art', 'science', 'cultural');
CREATE TYPE difficulty_level AS ENUM ('beginner', 'intermediate', 'advanced');
CREATE TYPE language_code AS ENUM ('en', 'sn', 'nd');

-- Create indexes for better performance
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_email ON users USING btree (email);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_users_school_id ON users USING btree (school_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_materials_creator_id ON materials USING btree (creator_id);
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_assignments_teacher_id ON assignments USING btree (teacher_id);

---

# scripts/init-dev.sql
-- Development database setup with sample data
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "citext";

-- Create custom types (same as production)
CREATE TYPE user_role AS ENUM ('teacher', 'school_admin', 'parent', 'system_admin');
CREATE TYPE subscription_plan AS ENUM ('free', 'teacher', 'school', 'premium');
CREATE TYPE subscription_status AS ENUM ('active', 'cancelled', 'expired', 'trial');
CREATE TYPE assignment_status AS ENUM ('draft', 'active', 'completed', 'archived');
CREATE TYPE progress_status AS ENUM ('not_started', 'in_progress', 'completed', 'overdue');
CREATE TYPE template_category AS ENUM ('math', 'language', 'art', 'science', 'cultural');
CREATE TYPE difficulty_level AS ENUM ('beginner', 'intermediate', 'advanced');
CREATE TYPE language_code AS ENUM ('en', 'sn', 'nd');

-- Insert sample data will be handled by seed scripts

---

# scripts/setup-development.sh
#!/bin/bash

echo "üöÄ Setting up ECD Materials Generator - Development Environment"

# Check prerequisites
echo "üìã Checking prerequisites..."

# Check Node.js version
NODE_VERSION=$(node --version | cut -d'v' -f2)
REQUIRED_NODE="18.0.0"
if [ "$(printf '%s\n' "$REQUIRED_NODE" "$NODE_VERSION" | sort -V | head -n1)" != "$REQUIRED_NODE" ]; then
    echo "‚ùå Node.js version $REQUIRED_NODE or higher is required. Current: $NODE_VERSION"
    exit 1
fi

# Check Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is required but not installed"
    exit 1
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is required but not installed"
    exit 1
fi

echo "‚úÖ Prerequisites check passed"

# Create environment files
echo "üìù Creating environment files..."

if [ ! -f server/.env ]; then
    cp server/.env.example server/.env
    echo "‚úÖ Created server/.env from template"
fi

if [ ! -f client/.env ]; then
    cp client/.env.example client/.env
    echo "‚úÖ Created client/.env from template"
fi

# Install dependencies
echo "üì¶ Installing dependencies..."
npm run install:all

# Setup Docker development environment
echo "üê≥ Setting up Docker development environment..."
docker-compose -f docker-compose.dev.yml build

# Start services
echo "üöÄ Starting development services..."
docker-compose -f docker-compose.dev.yml up -d postgres redis mailhog

# Wait for database to be ready
echo "‚è≥ Waiting for database to be ready..."
sleep 10

# Run database migrations
echo "üóÑÔ∏è Running database migrations..."
cd server && npm run migrate && npm run seed
cd ..

echo "‚úÖ Development environment setup complete!"
echo ""
echo "üéâ You can now start development with:"
echo "   npm run dev"
echo ""
echo "üìä Available services:"
echo "   - Frontend: http://localhost:3000"
echo "   - Backend API: http://localhost:5000"
echo "   - Database: postgresql://ecd_user:ecd_password@localhost:5432/ecd_db"
echo "   - Redis: redis://localhost:6379"
echo "   - MailHog (Email testing): http://localhost:8025"

---

# scripts/setup-production.sh
#!/bin/bash

echo "üöÄ Setting up ECD Materials Generator - Production Environment"

# Check prerequisites
echo "üìã Checking prerequisites..."

# Check environment variables
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL environment variable is required"
    exit 1
fi

if [ -z "$JWT_SECRET" ]; then
    echo "‚ùå JWT_SECRET environment variable is required"
    exit 1
fi

# Build Docker images
echo "üî® Building Docker images..."
docker-compose build --no-cache

# Setup database
echo "üóÑÔ∏è Setting up database..."
docker-compose run --rm backend npm run migrate

# Start services
echo "üöÄ Starting production services..."
docker-compose up -d

# Health check
echo "üè• Running health checks..."
sleep 30

# Check if services are healthy
if curl -f http://localhost/health > /dev/null 2>&1; then
    echo "‚úÖ Application is running and healthy"
else
    echo "‚ùå Application health check failed"
    docker-compose logs
    exit 1
fi

echo "‚úÖ Production deployment complete!"
echo ""
echo "üìä Services available at:"
echo "   - Application: http://localhost"
echo "   - API Health: http://localhost/health"

---

# scripts/seed-data.js
const { Sequelize } = require('sequelize');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../server/.env') });

// Sample data for development
const sampleData = {
  schools: [
    {
      id: 'school-1',
      name: 'Harare Primary School',
      address: '123 Main Street, Harare, Zimbabwe',
      contact_info: {
        phone: '+263-1-123-4567',
        email: 'info@harareprimary.edu.zw',
        principal: 'Mrs. Sarah Mukamuri'
      },
      subscription: {
        plan: 'school',
        status: 'active',
        expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000) // 1 year from now
      }
    },
    {
      id: 'school-2',
      name: 'Bulawayo Children Centre',
      address: '456 Park Avenue, Bulawayo, Zimbabwe',
      contact_info: {
        phone: '+263-9-876-5432',
        email: 'admin@bulawayochildren.edu.zw',
        principal: 'Mr. Thabo Ndlovu'
      },
      subscription: {
        plan: 'premium',
        status: 'active',
        expires_at: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)
      }
    }
  ],
  
  users: [
    {
      id: 'user-teacher-1',
      email: 'teacher1@harareprimary.edu.zw',
      password: 'hashedpassword123', // Will be properly hashed
      role: 'teacher',
      profile: {
        firstName: 'Grace',
        lastName: 'Moyo',
        phoneNumber: '+263-77-123-4567',
        language: 'en'
      },
      schoolId: 'school-1',
      subscription: {
        plan: 'teacher',
        status: 'active'
      }
    },
    {
      id: 'user-admin-1',
      email: 'admin@harareprimary.edu.zw',
      password: 'hashedpassword456',
      role: 'school_admin',
      profile: {
        firstName: 'John',
        lastName: 'Chikwanha',
        phoneNumber: '+263-77-987-6543',
        language: 'en'
      },
      schoolId: 'school-1',
      subscription: {
        plan: 'school',
        status: 'active'
      }
    }
  ],
  
  templates: [
    {
      id: 'template-math-1',
      name: 'Number Recognition 1-10',
      description: 'Interactive template for teaching number recognition from 1 to 10',
      category: 'math',
      subcategory: 'numbers',
      difficulty: 'beginner',
      ageGroup: { min: 3, max: 5 },
      culturalTags: ['zimbabwe', 'universal'],
      languages: ['en', 'sn', 'nd'],
      content: {
        layout: { type: 'grid', columns: 2, rows: 5 },
        elements: [
          { type: 'number', value: 1, position: { x: 0, y: 0 } },
          { type: 'image', src: 'one-apple.png', position: { x: 1, y: 0 } }
        ]
      },
      metadata: {
        downloads: 0,
        rating: 0,
        reviews: 0,
        isPremium: false,
        isActive: true
      }
    },
    {
      id: 'template-lang-1',
      name: 'Shona Alphabet Learning',
      description: 'Learn Shona alphabet with cultural illustrations',
      category: 'language',
      subcategory: 'alphabet',
      difficulty: 'beginner',
      ageGroup: { min: 4, max: 6 },
      culturalTags: ['zimbabwe', 'shona', 'traditional'],
      languages: ['sn', 'en'],
      content: {
        layout: { type: 'list', orientation: 'vertical' },
        elements: [
          { type: 'letter', value: 'A', pronunciation: 'ah', position: { x: 0, y: 0 } },
          { type: 'word', value: 'Asi', translation: 'But', position: { x: 1, y: 0 } }
        ]
      },
      metadata: {
        downloads: 0,
        rating: 0,
        reviews: 0,
        isPremium: false,
        isActive: true
      }
    }
  ],
  
  students: [
    {
      id: 'student-1',
      firstName: 'Tendai',
      lastName: 'Mutasa',
      age: 5,
      parentContact: {
        name: 'Mary Mutasa',
        phone: '+263-77-555-0001',
        email: 'mary.mutasa@gmail.com'
      },
      schoolId: 'school-1'
    },
    {
      id: 'student-2',
      firstName: 'Chipo',
      lastName: 'Dube',
      age: 4,
      parentContact: {
        name: 'Peter Dube',
        phone: '+263-77-555-0002',
        email: 'peter.dube@gmail.com'
      },
      schoolId: 'school-1'
    }
  ]
};

async function seedDatabase() {
  console.log('üå± Seeding development database...');
  
  try {
    // Database connection would be established here
    // Insert sample data
    console.log('‚úÖ Sample data inserted successfully!');
    
    console.log('\nüìä Seeded data summary:');
    console.log(`   - Schools: ${sampleData.schools.length}`);
    console.log(`   - Users: ${sampleData.users.length}`);
    console.log(`   - Templates: ${sampleData.templates.length}`);
    console.log(`   - Students: ${sampleData.students.length}`);
    
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  seedDatabase();
}

module.exports = { sampleData, seedDatabase };