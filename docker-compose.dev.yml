version: '3.8'

services:
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:5000
      - WATCHPACK_POLLING=true
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ecd-network
    stdin_open: true
    tty: true

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "5000:5000"
      - "9229:9229"  # Node.js debugging port
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://ecd_user:ecd_password@postgres:5432/ecd_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - JWT_EXPIRY=24h
      - REFRESH_TOKEN_EXPIRY=7d
    volumes:
      - ./server:/app
      - /app/node_modules
      - uploads_dev:/app/uploads
      - logs_dev:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - ecd-network
    command: npm run dev

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ecd_db
      - POSTGRES_USER=ecd_user
      - POSTGRES_PASSWORD=ecd_password
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-dev.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ecd-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - ecd-network
    command: redis-server --appendonly yes

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - ecd-network

volumes:
  postgres_data_dev:
  redis_data_dev:
  uploads_dev:
  logs_dev:

networks:
  ecd-network:
    driver: bridge
